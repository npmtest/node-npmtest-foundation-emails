{"/home/travis/build/npmtest/node-npmtest-foundation-emails/test.js":"/* istanbul instrument in package npmtest_foundation_emails */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-foundation-emails/lib.npmtest_foundation_emails.js":"/* istanbul instrument in package npmtest_foundation_emails */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_foundation_emails = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_foundation_emails = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-foundation-emails/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-foundation-emails && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_foundation_emails */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_foundation_emails\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_foundation_emails.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_foundation_emails.rollup.js'] =\n            local.assetsDict['/assets.npmtest_foundation_emails.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_foundation_emails.__dirname + '/lib.npmtest_foundation_emails.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-foundation-emails/node_modules/foundation-emails/gulpfile.js":"var $ = require('gulp-load-plugins')();\nvar gulp = require('gulp');\nvar sequence = require('run-sequence');\nvar panini = require('panini');\nvar supercollider = require('supercollider');\nvar rimraf = require('rimraf');\nvar browser = require('browser-sync');\nvar foundationDocs = require('foundation-docs');\nvar octophant = require('octophant');\nvar inky = require('inky');\nvar siphon = require('siphon-media-query');\nvar lazypipe = require('lazypipe');\nvar fs = require('fs');\n\n// Configuration for the documentation generator\nsupercollider\n  .config({\n    template: foundationDocs.componentTemplate,\n    marked: foundationDocs.marked,\n    handlebars: foundationDocs.handlebars,\n    keepFm: true,\n    quiet: false,\n    pageRoot: 'docs/pages',\n    data: {\n      repoName: 'foundation-emails',\n      editBranch: 'develop'\n    }\n  })\n  .searchConfig({\n    sort: ['page', 'component', 'sass variable', 'sass mixin', 'sass function', 'js class', 'js function', 'js plugin option', 'js event'],\n    pageTypes: {\n      library: function(item) {\n        return !!(item.library);\n      }\n    }\n  })\n  .adapter('sass')\n  .adapter('js');\n\n// Cleans the build folder\ngulp.task('clean', function(cb) {\n  rimraf('_build', cb);\n});\n\n// Copies static documentation assets\ngulp.task('copy', function() {\n  return gulp.src(['docs/assets/**/*', '!docs/assets/scss/**/*', '!docs/assets/js/**/*'])\n    .pipe(gulp.dest('_build/assets'));\n});\n\n// Builds documentation pages\ngulp.task('html', function() {\n  return gulp.src('docs/pages/**/*')\n    .pipe($.cached('docs'))\n    .pipe(supercollider.init())\n    .pipe(panini({\n      root: 'docs/pages/',\n      layouts: 'docs/layouts/',\n      partials: 'docs/partials/',\n      helpers: foundationDocs.handlebarsHelpers\n    }))\n    .pipe(gulp.dest('_build'))\n    .on('finish', function() {\n      supercollider.buildSearch('_build/data/search.json', function() {});\n    });\n});\n\ngulp.task('sass', ['sass:docs', 'sass:foundation']);\n\n// Compiles documentation-specific CSS\ngulp.task('sass:docs', function() {\n  return gulp.src('docs/assets/scss/docs.scss')\n    .pipe($.sass({ includePaths: [process.cwd()] }).on('error', $.sass.logError))\n    .pipe($.autoprefixer({\n      browsers: ['last 2 versions', 'ie >= 9']\n    }))\n    .pipe(gulp.dest('_build/assets/css'));\n});\n\n// Compiles Foundation-specific CSS\ngulp.task('sass:foundation', function() {\n  return gulp.src('scss/foundation-emails.scss')\n    .pipe($.sass().on('error', $.sass.logError))\n    .pipe(gulp.dest('_build/assets/css'));\n});\n\n// Compiles documentation JavaScript\ngulp.task('javascript:docs', function() {\n  return gulp.src(['node_modules/foundation-docs/js/*.js', 'docs/assets/js/**/*.js'])\n    .pipe($.concat('docs.js'))\n    .pipe(gulp.dest('_build/assets/js'));\n});\n\n// Generates a Sass settings file from the current codebase\ngulp.task('settings', function() {\n  octophant('scss/**/*.scss', {\n    title: 'Foundation for Emails Settings',\n    output: 'scss/settings/_settings.scss',\n    sort: ['global', 'grid', 'block-grid', 'type']\n  });\n});\n\n// Lints the Sass codebase\ngulp.task('lint', function() {\n  return gulp.src('scss/**/*.scss')\n    .pipe($.sassLint())\n    .pipe($.sassLint.format())\n    .pipe($.sassLint.failOnError());\n});\n\n// Creates a BrowserSync server\ngulp.task('server', ['build'], function() {\n  browser.init({\n    server: './_build'\n  });\n});\n\n// Uploads the documentation to the live server\ngulp.task('deploy:docs', ['build'], function() {\n  return gulp.src('./_build/**')\n    .pipe($.prompt.confirm('Make sure everything looks right before you deploy.'))\n    .pipe($.rsync({\n      root: './_build',\n      hostname: 'deployer@72.32.134.77',\n      destination: '/home/deployer/sites/foundation-emails-march16'\n    }));\n});\n\n// Runs the entire build process\ngulp.task('build', function(cb) {\n  sequence('clean', ['copy', 'html', 'sass', 'javascript:docs'], cb);\n});\n\n// Runs the build process, spins up a server, and watches for file changes\ngulp.task('default', ['server'], function() {\n  gulp.watch('docs/**/*', ['html', browser.reload]);\n  gulp.watch(['docs/assets/scss/**/*', 'node_modules/foundation-docs/scss/**/*'], ['sass:docs', browser.reload]);\n  gulp.watch('scss/**/*.scss', ['sass:foundation', browser.reload]);\n});\n\ngulp.task('test', ['sass', 'test:compile'], function() {\n  browser.init({ server: 'test/visual/_build', directory: true });\n  gulp.watch('scss/**/*.scss', ['sass:foundation', browser.reload]);\n  gulp.watch('test/visual/pages/*.html', ['test:compile', browser.reload]);\n});\n\ngulp.task('test:compile', function() {\n  gulp.src('test/visual/pages/*.html')\n    .pipe($.wrap({ src: 'test/visual/_template.html' }))\n    .pipe(inky())\n    .pipe(inliner('_build/assets/css/foundation-emails.css'))\n    .pipe(gulp.dest('test/visual/_build'));\n});\n\ngulp.task('templates', function() {\n  return gulp.src('templates/*.html')\n    .pipe($.wrap({ src: 'test/visual/_template.html' }))\n    .pipe(inky())\n    .pipe($.prettify({ indent_size: 2 }))\n    .pipe(gulp.dest('.templates'))\n    .pipe($.zip('all-templates.zip'))\n    .pipe(gulp.dest('.templates'));\n});\n\ngulp.task('download:build:index', function() {\n  return gulp.src('test/visual/_template.html', { base: 'test/visual' })\n    .pipe($.injectString.replace('<%= contents %>', ''))\n    .pipe($.injectString.replace('../assets/', ''))\n    .pipe($.rename('index.html'))\n    .pipe(gulp.dest('.download'));\n});\n\ngulp.task('download:build:templates', ['templates'], function() {\n  return gulp.src('.templates/*.html')\n    .pipe(gulp.dest('.download/templates'));\n});\n\ngulp.task('download:build:css', ['sass:foundation'], function() {\n  return gulp.src('_build/assets/css/foundation-emails.css')\n    .pipe(gulp.dest('.download/css'));\n})\n\ngulp.task('download:build', ['download:build:index', 'download:build:templates', 'download:build:css'], function() {\n  return gulp.src('.download/**/*')\n    .pipe($.zip('foundation-emails.zip'))\n    .pipe(gulp.dest('.'));\n});\n\ngulp.task('download', ['download:build'], function(done) {\n  return gulp.src('foundation-emails.zip')\n    .pipe($.rsync({\n      hostname: 'deployer@72.32.134.77',\n      destination: '/home/deployer/sites/foundation-sites-6-marketing/downloads/'\n    }));\n});\n\ngulp.task('dist', ['sass:foundation'], function() {\n  return gulp.src('_build/assets/css/foundation-emails.css')\n    .pipe(gulp.dest('dist'))\n    .pipe($.cssnano())\n    .pipe($.rename('foundation-emails.min.css'))\n    .pipe(gulp.dest('dist'));\n});\n\nfunction inliner(css) {\n  var css = fs.readFileSync(css).toString();\n  var mqCss = siphon(css);\n\n  var pipe = lazypipe()\n    .pipe($.inlineCss, {\n      applyStyleTags: false,\n      removeStyleTags: false,\n      removeLinkTags: false\n    })\n    .pipe($.injectString.replace, '<!-- <style> -->', '<style>'+mqCss+'</style>')\n    .pipe($.htmlmin, {\n      collapseWhitespace: false,\n      minifyCSS: false\n    });\n\n  return pipe();\n}\n"}